{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"btn btn-notebook\" role=\"button\">\n",
    "    <img src=\"../_static/images/colab_logo_32px.png\"> [Run in Google Colab](https://colab.research.google.com/drive/1ANQUix9Y6V4RXu-vAaCFGmU979d5m4bO?usp=sharing)\n",
    "</div>\n",
    "<div class=\"btn btn-notebook\" role=\"button\">\n",
    "    <img src=\"../_static/images/github_logo_32px.png\"> [View on GitHub](https://github.com/adapt-python/adapt/blob/master/docs/examples/Classification.ipynb)\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You will find here the application of DA methods from the ADAPT package on a simple two \n",
    "dimensional DA classification problem.\n",
    "\n",
    "First we import packages needed in the following. We will use ``matplotlib Animation`` tools in order to\n",
    "get a visual understanding of the mselected methods:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib\n",
    "import matplotlib.animation as animation\n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Experimental Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now set the synthetic classification DA problem using the [make_classification_da](../generated/adapt.utils.make_classification_da.html) function from ``adapt.utils``."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from adapt.utils import make_classification_da\n",
    "\n",
    "Xs, ys, Xt, yt = make_classification_da()\n",
    "\n",
    "x_grid, y_grid = np.meshgrid(np.linspace(-0.1, 1.1, 100),\n",
    "                             np.linspace(-0.1, 1.1, 100))\n",
    "X_grid = np.stack([x_grid.ravel(), y_grid.ravel()], -1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We define here ``show`` function which we will use in the following to visualize the algorithms performances\n",
    "on the toy problem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def show(yp_grid=None, yp_t=None, x_grid=x_grid, y_grid=y_grid, Xs=Xs, Xt=Xt,\n",
    "         weights_src=50*np.ones(100), disc_grid=None):\n",
    "    cm = matplotlib.colors.ListedColormap(['w', 'r', 'w'])\n",
    "    ax = plt.gca()\n",
    "    if yp_grid is not None:\n",
    "        ax.contourf(x_grid, y_grid, yp_grid, cmap=cm, alpha=1.)\n",
    "        ax.plot([Xs[0, 0]], [Xs[0, 1]], c=\"red\", label=\"class separation\")\n",
    "    if disc_grid is not None:\n",
    "        cm_disc = matplotlib.colors.ListedColormap([(1,1,1,0), 'g', (1,1,1,0)])\n",
    "        ax.contourf(x_grid, y_grid, disc_grid, cmap=cm_disc, alpha=0.5)\n",
    "        ax.plot([Xs[0, 0]], [Xs[0, 1]], c=\"green\", label=\"disc separation\")\n",
    "    if yp_t is not None:\n",
    "        score = accuracy_score(yt.ravel(), yp_t.ravel())\n",
    "        score = \" -- Tgt Acc = %.2f\"%score\n",
    "    else:\n",
    "        score = \"\"\n",
    "    ax.scatter(Xs[ys==0, 0], Xs[ys==0, 1], label=\"source\", edgecolors='k',\n",
    "               c=\"C0\", s=weights_src[ys==0], marker=\"o\", alpha=0.9)\n",
    "    ax.scatter(Xs[ys==1, 0], Xs[ys==1, 1], edgecolors='k',\n",
    "               c=\"C0\", s=2*weights_src[ys==1], marker=\"*\", alpha=0.9)\n",
    "    ax.scatter(Xt[yt==0, 0], Xt[yt==0, 1], label=\"target\", edgecolors='k',\n",
    "               c=\"C1\", s=50, marker=\"o\", alpha=0.9)\n",
    "    ax.scatter(Xt[yt==1, 0], Xt[yt==1, 1], edgecolors='k',\n",
    "               c=\"C1\", s=100, marker=\"*\", alpha=0.9)\n",
    "    ax.legend(fontsize=14, loc=\"upper left\")\n",
    "    ax.set_xlabel(\"X0\", fontsize=16)\n",
    "    ax.set_ylabel(\"X1\", fontsize=16)\n",
    "    plt.suptitle(\"Toy classification DA issue\"+score, fontsize=18)\n",
    "    \n",
    "Writer = animation.writers['ffmpeg']\n",
    "writer = Writer(fps=20, metadata=dict(artist='Adapt'), bitrate=1800)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1, 1, figsize=(8, 6))\n",
    "show()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that we also define a ``writer`` which will be used to record the evolution of predictions through epochs.\n",
    "\n",
    "As we can see in the figure above (plotting the two dimensions of the input data),\n",
    "source and target data define two distinct domains. We have modeled here a classical unsupervised \n",
    "DA issue where the goal is to build a good model on orange data knowing only the labels (\"o\" or \"*\" given by ``y``) of the blue\n",
    "points.\n",
    "\n",
    "We now define the base model used to learn the task. We use here a neural network with two hidden layer.\n",
    "We also define a ``SavePrediction`` callback in order to save the prediction of the neural network at\n",
    "each epoch."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras import Sequential\n",
    "from tensorflow.keras.layers import Input, Dense, Reshape\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "\n",
    "def get_model(input_shape=(2,)):\n",
    "    model = Sequential()\n",
    "    model.add(Dense(100, activation='elu',\n",
    "                    input_shape=input_shape))\n",
    "    model.add(Dense(100, activation='relu'))\n",
    "    model.add(Dense(1, activation=\"sigmoid\"))\n",
    "    model.compile(optimizer=Adam(0.01), loss='binary_crossentropy')\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.callbacks import Callback\n",
    "\n",
    "class SavePrediction(Callback):  \n",
    "    \"\"\"\n",
    "    Callbacks which stores predicted\n",
    "    labels in history at each epoch.\n",
    "    \"\"\"\n",
    "    def __init__(self, X_grid_=X_grid, Xt_=Xt):\n",
    "        self.X_grid = X_grid_\n",
    "        self.Xt = Xt_\n",
    "        self.custom_history_grid_ = []\n",
    "        self.custom_history_ = []\n",
    "        super().__init__()\n",
    "\n",
    "    def on_epoch_end(self, batch, logs={}):\n",
    "        \"\"\"Applied at the end of each epoch\"\"\"\n",
    "        predictions = self.model.predict_on_batch(self.X_grid).reshape(100, 100)\n",
    "        self.custom_history_grid_.append(predictions)\n",
    "        predictions = self.model.predict_on_batch(self.Xt).ravel()\n",
    "        self.custom_history_.append(predictions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Src Only"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, let's fit a network on source data without any adaptation. As we can observe,\n",
    "the \"o\" labels from the target domain are missclassified.\n",
    "Because of the \"*\" blue points close to the \"o\" domain, the network learns a class\n",
    "border not regularized enough and then misclassifies the target \"*\" data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(0)\n",
    "tf.random.set_seed(0)\n",
    "\n",
    "model = get_model()\n",
    "save_preds = SavePrediction()\n",
    "model.fit(Xs, ys, callbacks=[save_preds], epochs=100, batch_size=100, verbose=0);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "def animate(i):\n",
    "    plt.clf()\n",
    "    yp_grid = (save_preds.custom_history_grid_[i]>0.5).astype(int)\n",
    "    yp_t = save_preds.custom_history_[i]>0.5\n",
    "    show(yp_grid, yp_t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 351,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib notebook\n",
    "fig, ax = plt.subplots(1, 1, figsize=(8, 6))\n",
    "animate(99)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![src_only](../_static/images/srcOnlyCla.gif)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "ani = animation.FuncAnimation(fig, animate, frames=100, repeat=False)\n",
    "ani.save('srcOnlyClassif.mp4', writer=writer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## mSDA"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's now consider the domain adaptation method [mSDA](../generated/adapt.feature_based.mSDA.html). \n",
    "This \"two-stage\" method first perfroms a feature encoding on source data and then fits\n",
    "an estimator using the new feature space.\n",
    "\n",
    "The encoded features are learned with a stacked denoising autoencoder. Here we choose to reduce\n",
    "the feature space to one feature with the encoder. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_encoder():\n",
    "    model = Sequential()\n",
    "    model.add(Dense(100, activation='elu', input_shape=(2,)))\n",
    "    model.add(Dense(1, activation=None))\n",
    "    model.compile(optimizer=Adam(0.01), loss='mse')\n",
    "    return model\n",
    "\n",
    "def get_decoder():\n",
    "    model = Sequential()\n",
    "    model.add(Dense(100, activation='elu', input_shape=(1,)))\n",
    "    model.add(Dense(2, activation=\"sigmoid\"))\n",
    "    model.compile(optimizer=Adam(0.01), loss='mse')\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [],
   "source": [
    "from adapt.feature_based import mSDA\n",
    "\n",
    "model = mSDA(get_encoder(), get_decoder(), get_model((1,)),\n",
    "             noise_lvl=0.1, random_state=0)\n",
    "model.fit_embeddings(Xs, Xt, epochs=100, batch_size=200, verbose=0);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [],
   "source": [
    "save_preds = SavePrediction(model.predict_features(X_grid), model.predict_features(Xt))\n",
    "model.fit_estimator(model.predict_features(Xs), ys, callbacks=[save_preds],\n",
    "                    epochs=100, batch_size=100, verbose=0);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(0)\n",
    "noise = np.random.randn(100, 1) * 0.1\n",
    "noise_grid = np.random.randn(len(X_grid), 1)* 0.1\n",
    "Xs_enc = model.predict_features(Xs)\n",
    "Xs_enc = np.concatenate((noise, Xs_enc), 1)\n",
    "Xt_enc = model.predict_features(Xt)\n",
    "Xt_enc = np.concatenate((noise, Xt_enc), 1)\n",
    "X_grid_enc = model.predict_features(X_grid)\n",
    "X_grid_enc = np.concatenate((noise_grid, X_grid_enc), 1)\n",
    "x_grid_enc = X_grid_enc[:, 0].reshape(100,100)\n",
    "y_grid_enc = X_grid_enc[:, 1].reshape(100,100)\n",
    "    \n",
    "    \n",
    "def animate_msda(i):\n",
    "    yp_grid = (save_preds.custom_history_grid_[i]>0.5).astype(int)\n",
    "    yp_t = save_preds.custom_history_[i]>0.5\n",
    "    plt.sca(ax1)\n",
    "    ax1.clear()\n",
    "    ax1.set_title(\"Input Space\", fontsize=16)\n",
    "    show(yp_grid, yp_t)\n",
    "    plt.sca(ax2)\n",
    "    ax2.clear()\n",
    "    ax2.set_title(\"Encoded Space\", fontsize=16)\n",
    "    show(yp_grid, yp_t,\n",
    "         x_grid=x_grid_enc, y_grid=y_grid_enc, Xs=Xs_enc, Xt=Xt_enc)\n",
    "    ax2.set_xlabel(\"U0\", fontsize=16)\n",
    "    ax2.set_ylabel(\"U1\", fontsize=16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 350,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib notebook\n",
    "fig, (ax1 , ax2) = plt.subplots(1, 2, figsize=(16, 6))\n",
    "animate_msda(99)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![msda](../_static/images/msda.gif)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [],
   "source": [
    "ani = animation.FuncAnimation(fig, animate_msda, frames=100, repeat=False)\n",
    "ani.save('mSDAClassif.mp4', writer=writer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We plot on the left, the evolution of the delimiting line through epochs. On the right\n",
    "we represent the one dimensional encoded space (on the y axis), we give random x coordinate\n",
    "to the inputs in order to get a better visualization.\n",
    "\n",
    "As we can see, on the encoded feature space blue and orange \"*\" labels go on one side and \"o\" on \n",
    "the other. So when fitting the classifier on the encoded space using blue data, the network learns a\n",
    "good delimitation line for both domains. Thus [mSDA](../generated/adapt.feature_based.mSDA.html)\n",
    "perfroms an efficient adaptation between domains for this toy DA issue."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## DANN"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now consider the [DANN](../generated/adapt.feature_based.DANN.html) method.\n",
    "This method consists in learning a new feature representation on which no \n",
    "``discriminator`` network can be able to classify between source and target data.\n",
    "\n",
    "This is done with adversarial techniques following the principle of GANs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_encoder(input_shape=(2,)):\n",
    "    model = Sequential()\n",
    "    model.add(Dense(100, activation='elu',\n",
    "                    input_shape=input_shape))\n",
    "    model.add(Dense(2, activation=\"sigmoid\"))\n",
    "    model.compile(optimizer=Adam(0.01), loss='mse')\n",
    "    return model\n",
    "\n",
    "def get_task(input_shape=(2,)):\n",
    "    model = Sequential()\n",
    "    model.add(Dense(10, activation='elu'))\n",
    "    model.add(Dense(1, activation=\"sigmoid\"))\n",
    "    model.compile(optimizer=Adam(0.01), loss='mse')\n",
    "    return model\n",
    "\n",
    "def get_discriminator(input_shape=(2,)):\n",
    "    model = Sequential()\n",
    "    model.add(Dense(10, activation='elu'))\n",
    "    model.add(Dense(1, activation=\"sigmoid\"))\n",
    "    model.compile(optimizer=Adam(0.01), loss='mse')\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.callbacks import Callback\n",
    "\n",
    "class SavePredictionDann(Callback):  \n",
    "    \"\"\"\n",
    "    Callbacks which stores predicted\n",
    "    labels in history at each epoch.\n",
    "    \"\"\"\n",
    "    def __init__(self, X_grid_=X_grid, Xt_=Xt, Xs_=Xs):\n",
    "        self.X_grid = X_grid_\n",
    "        self.Xt = Xt_\n",
    "        self.Xs = Xs_\n",
    "        self.custom_history_grid_ = []\n",
    "        self.custom_history_ = []\n",
    "        self.custom_history_enc_s = []\n",
    "        self.custom_history_enc_t = []\n",
    "        self.custom_history_enc_grid = []\n",
    "        self.custom_history_disc = []\n",
    "        super().__init__()\n",
    "\n",
    "    def on_epoch_end(self, batch, logs={}):\n",
    "        \"\"\"Applied at the end of each epoch\"\"\"\n",
    "        predictions = model.task_.predict_on_batch(\n",
    "            model.encoder_.predict_on_batch(self.X_grid)).reshape(100, 100)\n",
    "        self.custom_history_grid_.append(predictions)\n",
    "        predictions = model.task_.predict_on_batch(\n",
    "            model.encoder_.predict_on_batch(self.Xt)).ravel()\n",
    "        self.custom_history_.append(predictions)\n",
    "        predictions = model.encoder_.predict_on_batch(self.Xs)\n",
    "        self.custom_history_enc_s.append(predictions)\n",
    "        predictions = model.encoder_.predict_on_batch(self.Xt)\n",
    "        self.custom_history_enc_t.append(predictions)\n",
    "        predictions = model.encoder_.predict_on_batch(self.X_grid)\n",
    "        self.custom_history_enc_grid.append(predictions)\n",
    "        predictions = model.discriminator_.predict_on_batch(\n",
    "            model.encoder_.predict_on_batch(self.X_grid)).reshape(100, 100)\n",
    "        self.custom_history_disc.append(predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [],
   "source": [
    "from adapt.feature_based import DANN\n",
    "\n",
    "save_preds = SavePredictionDann()\n",
    "\n",
    "model = DANN(get_encoder(), get_task(), get_discriminator(),\n",
    "             lambda_=1.0, optimizer=Adam(0.001), random_state=0)\n",
    "\n",
    "model.fit(Xs, ys, Xt,\n",
    "          callbacks=[save_preds],\n",
    "          epochs=300, batch_size=100, verbose=0);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {},
   "outputs": [],
   "source": [
    "enc_s = np.concatenate(save_preds.custom_history_enc_s)\n",
    "enc_t = np.concatenate(save_preds.custom_history_enc_t)\n",
    "enc = np.concatenate((enc_s, enc_t))\n",
    "x_min, y_min = enc.min(0)\n",
    "x_max, y_max = enc.max(0)\n",
    "\n",
    "x_min, y_min = (0., 0.)\n",
    "x_max, y_max = (1., 1.)\n",
    "\n",
    "def animate_dann(i):\n",
    "    yp_grid = (save_preds.custom_history_grid_[i]>0.5).astype(int)\n",
    "    yp_t = save_preds.custom_history_[i]>0.5\n",
    "    plt.sca(ax1)\n",
    "    ax1.clear()\n",
    "    ax1.set_title(\"Input Space\", fontsize=16)\n",
    "    show(yp_grid, yp_t)\n",
    "    plt.sca(ax2)\n",
    "    ax2.clear()\n",
    "    ax2.set_title(\"Encoded Space\", fontsize=16)\n",
    "    Xs_enc = save_preds.custom_history_enc_s[i]\n",
    "    Xt_enc = save_preds.custom_history_enc_t[i]\n",
    "    X_grid_enc = save_preds.custom_history_enc_grid[i]\n",
    "    x_grid_enc = X_grid_enc[:, 0].reshape(100,100)\n",
    "    y_grid_enc = X_grid_enc[:, 1].reshape(100,100)\n",
    "    disc_grid = (save_preds.custom_history_disc[i]>0.5).astype(int)\n",
    "    show(yp_grid, yp_t,\n",
    "         x_grid=x_grid_enc, y_grid=y_grid_enc,\n",
    "         Xs=Xs_enc, Xt=Xt_enc, disc_grid=disc_grid)\n",
    "    ax2.set_xlabel(\"U0\", fontsize=16)\n",
    "    ax2.set_ylabel(\"U1\", fontsize=16)\n",
    "    ax2.set_xlim(x_min, x_max)\n",
    "    ax2.set_ylim(y_min, y_max)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 349,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib notebook\n",
    "fig, (ax1 , ax2) = plt.subplots(1, 2, figsize=(16, 6))\n",
    "animate_dann(299)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![dann](../_static/images/dann.gif)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [],
   "source": [
    "ani = animation.FuncAnimation(fig, animate_dann, frames=300, repeat=False)\n",
    "ani.save('DANNClassifTrue3.mp4', writer=writer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see on the figure above, when applying [DANN](../generated/adapt.feature_based.DANN.html)\n",
    "algorithm, source data are projected on target data in the encoded space. Thus a ``task`` network\n",
    "trained in parallel to the ``encoder`` and the ``discriminator`` is able to well classify \"o\" from \"*\" in the target domain."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Instance Based"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we consider here the instance-based method [KMM](../generated/adapt.instance_based.KMM.html).\n",
    "This method consists in reweighting source instances in order to minimize the MMD distance between\n",
    "source and target domain. Then the algorithm trains a classifier using the reweighted source data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 344,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting weights...\n",
      "     pcost       dcost       gap    pres   dres\n",
      " 0:  4.1412e+04 -1.3491e+06  3e+07  4e-01  2e-15\n",
      " 1:  1.8736e+02 -2.9533e+05  4e+05  2e-03  9e-13\n",
      " 2:  2.0702e+02 -3.6581e+04  4e+04  2e-05  3e-13\n",
      " 3:  8.2217e+01 -1.6809e+04  2e+04  7e-06  1e-13\n",
      " 4: -3.5699e+03 -2.6162e+04  2e+04  7e-06  1e-13\n",
      " 5: -3.6501e+03 -7.6959e+03  4e+03  1e-06  2e-14\n",
      " 6: -3.8524e+03 -8.5199e+03  5e+03  3e-16  8e-16\n",
      " 7: -4.0411e+03 -4.6607e+03  6e+02  2e-16  2e-16\n",
      " 8: -4.0654e+03 -4.4933e+03  4e+02  2e-16  2e-16\n",
      " 9: -4.0776e+03 -4.1640e+03  9e+01  2e-16  2e-16\n",
      "10: -4.0853e+03 -4.1556e+03  7e+01  2e-16  2e-16\n",
      "11: -4.0894e+03 -4.0973e+03  8e+00  2e-16  2e-16\n",
      "12: -4.0903e+03 -4.0934e+03  3e+00  1e-16  2e-16\n",
      "13: -4.0906e+03 -4.0912e+03  6e-01  2e-16  2e-16\n",
      "14: -4.0906e+03 -4.0911e+03  4e-01  2e-16  2e-16\n",
      "15: -4.0907e+03 -4.0908e+03  1e-01  2e-16  2e-16\n",
      "16: -4.0907e+03 -4.0908e+03  5e-02  2e-16  2e-16\n",
      "17: -4.0908e+03 -4.0908e+03  2e-02  2e-16  2e-16\n",
      "18: -4.0908e+03 -4.0908e+03  3e-03  2e-16  3e-16\n",
      "Optimal solution found.\n",
      "Fitting estimator...\n"
     ]
    }
   ],
   "source": [
    "from adapt.instance_based import KMM\n",
    "\n",
    "save_preds = SavePrediction()\n",
    "\n",
    "model = KMM(get_model(), kernel_params=dict(gamma=1), random_state=0)\n",
    "\n",
    "model.fit(Xs, ys, Xt,\n",
    "          callbacks=[save_preds],\n",
    "          epochs=100, batch_size=100, verbose=0);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 345,
   "metadata": {},
   "outputs": [],
   "source": [
    "def animate_kmm(i):\n",
    "    plt.clf()\n",
    "    yp_grid = (save_preds.custom_history_grid_[i]>0.5).astype(int)\n",
    "    yp_t = save_preds.custom_history_[i]>0.5\n",
    "    weights_src = model.predict_weights().ravel() * 50\n",
    "    show(yp_grid, yp_t, weights_src=weights_src)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 348,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(1, 1, figsize=(8, 6))\n",
    "animate_kmm(99)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![kmm](../_static/images/kmm.gif)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 347,
   "metadata": {},
   "outputs": [],
   "source": [
    "ani = animation.FuncAnimation(fig, animate_kmm, frames=100, repeat=False)\n",
    "ani.save('kmmClassif.mp4', writer=writer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## See also"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": [
     "nbsphinx-gallery"
    ]
   },
   "source": [
    "- [Toy Regression](Regression)\n",
    "- [Two Moons](Two_moons)"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Tags",
  "kernelspec": {
   "display_name": "adapt-dev",
   "language": "python",
   "name": "adapt-dev"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
